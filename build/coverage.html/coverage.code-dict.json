{"/home/travis/build/npmtest/node-npmtest-meanio/test.js":"/* istanbul instrument in package npmtest_meanio */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-meanio/lib.npmtest_meanio.js":"/* istanbul instrument in package npmtest_meanio */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_meanio = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_meanio = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-meanio/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-meanio && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_meanio */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_meanio\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_meanio.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_meanio.rollup.js'] =\n            local.assetsDict['/assets.npmtest_meanio.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_meanio.__dirname +\n                    '/lib.npmtest_meanio.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-meanio/node_modules/meanio/lib/mean.js":"'use strict';\n\nvar config = require('config'),\n  Container = require('lazy-dependable').Container,\n  inherits = require('util').inherits,\n  Q = require('q');\n\n\nrequire('./json.js');\n\nfunction Meanio() {\n  Container.call(this);\n  if (this.active) return;\n  Meanio.Singleton = this;\n  this.version = require('../package').version;\n  this.instanceWaitersQ = [];\n  var defer;\n  while(Meanio.instanceWaiters.length){\n    defer = Q.defer();\n    Meanio.instanceWaiters.shift()(this,defer);\n    this.instanceWaitersQ.push(defer.promise);\n  }\n}\n\ninherits(Meanio, Container);\n\nMeanio.prototype.status = function() {\n  return {\n    active: this.active,\n    name: this.name\n  };\n};\n\nMeanio.getConfig = Meanio.prototype.getConfig = function _getConfig() {\n  return config;\n};\n\n/**\n * @deprecated Opted to change the name to `getConfig` to reduce confusion, the config is not loaded upon this call\n */\nMeanio.loadConfig = Meanio.prototype.loadConfig = function(){\n  console.error('Meanio.loadConfig() has been deprecated. Update to Meanio.getConfig().');\n  return Meanio.getConfig();\n};\n\nMeanio.instanceWaiters = [];\nMeanio.onInstance = function(func){\n  Meanio.instanceWaiters.push(func);\n};\n\nMeanio.prototype.Menus = require('./core_modules/menu');\n(require('./core_modules/module'))(Meanio);\n(require('./core_modules/db'))(Meanio);\n(require('./core_modules/server'))(Meanio);\n\nvar mean = new Meanio();\n\n/*global exports:true*/\nmodule.exports = exports = mean;\n/*global exports:false*/\n\n\n\n","/home/travis/build/npmtest/node-npmtest-meanio/node_modules/meanio/lib/json.js":"(function () {\n  'use strict';\n\n  /**\n   * Moved this code out of module/util.js\n   * It's being used by config and module\n   * TODO we should find a way to not have\n   *  to modify a global for this functionality\n   */\n\n  /**\n   * Adds a flatten capability to the Global JSON\n   * @param data\n   * @param options\n   * @returns {{}}\n   */\n  JSON.flatten = function(data, options) {\n    var result = {};\n    flatten(data, '');\n\n    function flatten(config, root) {\n      for (var index in config) {\n        if (config[index] && !config[index].value && typeof(config[index]) === 'object') {\n          flatten(config[index], layerRoot(root, index));\n        } else {\n          result[layerRoot(root, index)] = {\n            'value': config[index]\n          };\n\n          if (options['default']) {\n            result[layerRoot(root, index)]['default'] = config[index];\n          }\n        }\n      }\n    }\n\n    function layerRoot(root, layer) {\n      return (root ? root + '.' : '') + layer;\n    }\n    return result;\n  };\n\n  /**\n   * Adds an unflatten capability to the Global JSON\n   * @param data\n   * @returns {*}\n   */\n  JSON.unflatten = function(data) {\n    if (Object(data) !== data || Array.isArray(data)) {\n      return data;\n    }\n\n    var regex = /\\.?([^.\\[\\]]+)|\\[(\\d+)\\]/g,\n      resultholder = {};\n    for (var p in data) {\n      var cur = resultholder,\n        prop = '',\n        m;\n      while ((m = regex.exec(p))) {\n        cur = cur[prop] || (cur[prop] = (m[2] ? [] : {}));\n        prop = m[2] || m[1];\n      }\n      cur[prop] = data[p];\n    }\n    return resultholder[''] || resultholder;\n  };\n})();","/home/travis/build/npmtest/node-npmtest-meanio/node_modules/meanio/lib/core_modules/menu/index.js":"'use strict';\nvar _ = require('lodash');\nvar MenuItem = require('./MenuItem.js');\n\nvar allMenus = new MenuItem(),\n  _ = require('lodash');\n\nfunction Menus() {\n}\n\nMenus.prototype.add = function (options) {\n  if (arguments.length === 0) return this;\n  if (options instanceof Array) {\n    options.forEach(Menus.prototype.add.bind(this));\n    return this;\n  }\n  if (arguments.length > 1) {\n    Array.prototype.forEach.call(arguments, this.add.bind(this));\n    return this;\n  }\n\n  //fixes scaffolding: menu=path\n  if (options.menu !== undefined) {\n    options.path = options.menu;\n  }\n\n  options = _.assign({\n      path: 'main',\n      roles: ['anonymous'],\n    },\n    options);\n  options.path = options.path.replace(/^\\//, '');\n  var item = allMenus.findOrCreate(options.path.split('/'));\n  item.add(new MenuItem(options));\n  return this;\n};\n\nMenus.prototype.get = function (options) {\n  options = options || {};\n  options.menu = options.menu || 'main';\n  options.roles = options.roles || ['anonymous'];\n  options.defaultMenu = options.defaultMenu || [];\n\n  var sm = allMenus.get(options.roles, options.menu.split('/'));\n  if (!sm) {\n    //no menu at all\n    return options.defaultMenu;\n  }\n  var ret = sm.get(options.roles);\n  return ret ? options.defaultMenu.concat(ret.submenus.map(mapDoStrip)) : options.defaultMenu;\n};\n\nfunction mapDoStrip (v) {\n  return v ? v.strip() : undefined;\n}\n\nmodule.exports = Menus;\n","/home/travis/build/npmtest/node-npmtest-meanio/node_modules/meanio/lib/core_modules/menu/MenuItem.js":"'use strict';\nvar _ = require('lodash');\n\n//MenuItem class\nfunction MenuItem (options) {\n  options = _.assign ({name: null, title:null, link:null, roles:null}, options);\n  options.name = options.name || (options.link ? options.link.replace('/','_') : undefined) || options.title;\n  this.name = options.name;\n  this.title = options.title;\n  this.link = options.link;\n  this.roles = options.roles;\n  this.icon = options.icon;\n  this.weight = options.weight;\n  this.submenus = options.submenus || [];\n}\n\nMenuItem.prototype.strip = function () {\n  return {\n    name: this.name,\n    title:this.title,\n    link: this.link,\n    roles:this.roles,\n    icon: this.icon,\n    weight: this.weight,\n    submenus: this.submenus.map(mapDoStrip)\n  };\n};\n\n\nMenuItem.hasRole = function (role, roles) {\n  return (roles.indexOf(role) > -1);\n};\n\nMenuItem.prototype.props = function () {\n  return {\n    name: this.name,\n    title:this.title,\n    link:this.link,\n    icon: this.icon,\n    weight: this.weight,\n    roles:this.roles\n  };\n};\n\nMenuItem.prototype.findOrCreate = function (path) {\n  if (!path.length) return this;\n  var p = path.shift();\n  var index = this.list().indexOf(p);\n  if (index > -1) return this.submenus[index].findOrCreate(path);\n  var n = new MenuItem();\n  n.name = p;\n  this.submenus.push (n);\n  return n.findOrCreate(path);\n};\n\nMenuItem.prototype.list = function () {\n  return this.submenus.map(extractNames);\n};\n\nMenuItem.prototype.get = function (roles, path) {\n  roles = roles ? roles.slice() : [];\n  if (roles.indexOf('anonymous') < 0 && roles.indexOf('authenticated') < 0) {\n    roles.push ('authenticated');\n  }\n  if (roles.indexOf('all') < 0) roles.push('all');\n\n  var list = this.list();\n  if (path) {\n    if (!path.length) return this;\n    var n = path.shift();\n    var index = list.indexOf (n);\n    return this.submenus[index] ? this.submenus[index].get(roles,path) : undefined;\n  }\n\n  if (this.roles) {\n    if (!_.intersection(this.roles, roles).length) return undefined;\n  }\n\n  return new MenuItem ({\n    roles: this.roles || null,\n    link : this.link || null,\n    title:this.title || null,\n    name : this.name || null,\n    icon : this.icon || null,\n    weight: this.weight || null,\n    submenus : this.submenus.map(get_get.bind(null, roles)).filter(remove_nulls),\n  });\n};\n\nMenuItem.prototype.add = function (mi) {\n  var index = this.list().indexOf(mi.name);\n  var itm;\n  if (index > -1) {\n    var ts = mi.props();\n    itm = this.submenus[index];\n    for (var i in ts) itm[i] = ts[i];\n  }else{\n    itm = mi;\n    this.submenus.push (itm);\n  }\n  return itm;\n};\n\n//helper functions\nfunction extractNames (v) {\n  return v.name;\n}\n\nfunction get_get (roles,v) {\n  return v.get(roles);\n}\n\nfunction remove_nulls (v) {\n  return v;\n}\n\nfunction mapDoStrip (v) {\n  return v ? v.strip() : undefined;\n}\n\nmodule.exports = MenuItem;\n","/home/travis/build/npmtest/node-npmtest-meanio/node_modules/meanio/lib/core_modules/module/index.js":"'use strict';\n\nvar Q = require('q'),\n    swig = require('swig'),\n    fs = require('fs'),\n    _ = require('lodash'),\n    path = require('path'),\n    util = require('./util'),\n    DependableList = require('./dependablelist'),\n    search = require('./search'),\n    Events = require('./events');\n\nvar _modules = new DependableList();\n\nfunction lowerCaseFirstLetter(string) {\n    return string.charAt(0).toLowerCase() + string.slice(1);\n}\n\n//finding modules\n//\nfunction findModulesError(defer, error) {\n    console.error('Error loading modules', error);\n    defer.resolve();\n}\n\nfunction getModulesHandler(meanioinstance, req, res, next) {\n    res.json(meanioinstance.exportable_modules_list);\n}\n\nfunction findModulesDone(meanioinstance, app, defer) {\n    var config = meanioinstance.getConfig();\n    app.get('/_getModules', getModulesHandler.bind(null, meanioinstance));\n\n    if (!_modules.unresolved.empty()) {\n        throw 'Packages with unresolved dependencies: ' + _modules.listOfUnresolved();\n    }\n    enableModules(meanioinstance, defer);\n}\n//\n\n\n//enabling modules\n//\nfunction moduleActivator(defers, meaniosingleton, loadedmodule) {\n    if (loadedmodule) {\n        meaniosingleton.app.useStatic('/' + loadedmodule.name, loadedmodule.source + '/public');\n        var defer = Q.defer();\n        defers.push(defer);\n        loadedmodule.activate();\n        meaniosingleton.resolve(loadedmodule.name, defer.resolve.bind(defer));\n    }\n}\n\nfunction moduleRegistrator(meaniosingleton, loadedmodule) {\n    if (loadedmodule) {\n        meaniosingleton.exportable_modules_list.push({\n            name: loadedmodule.name,\n            angularDependencies: loadedmodule.angularDependencies\n        });\n    }\n}\n\nfunction onModulesEnabled(meanioinstance, defer) {\n    _modules.traverse(moduleRegistrator.bind(null, meanioinstance));\n    defer.resolve();\n}\n\nfunction enableModules(meanioinstance, defer) {\n    var defers = [];\n    _modules.traverse(moduleActivator.bind(null, defers, meanioinstance));\n    Q.all(defers).done(onModulesEnabled.bind(null, meanioinstance, defer));\n}\n//\n\nfunction findModules(meanioinstance, defer, app) {\n    var disabled = _.toArray(meanioinstance.getConfig().disabledModules);\n    Q.all([\n        search(_modules, disabled, 'packages'),\n        search(_modules, disabled, 'packages/core'),\n        search(_modules, disabled, 'packages/custom'),\n        search(_modules, disabled, 'packages/contrib'),\n        search(_modules, disabled, 'node_modules')\n    ]).done(findModulesDone.bind(null, meanioinstance, app, defer), findModulesError.bind(null, defer));\n}\n\nfunction onInstance(meanioinstance, defer) {\n    meanioinstance.resolve('app', findModules.bind(null, meanioinstance, defer));\n}\n\nfunction moduleHasName(targetname, module) {\n    if (targetname === module.name) {\n        return true;\n    }\n}\n\nfunction supportModules(Meanio) {\n    Meanio.onInstance(onInstance);\n    Meanio.prototype.moduleEnabled = function (name) {\n        return this.modules.traverseConditionally(moduleHasName.bind(null, name)) || false;\n    };\n\n    //static property\n    Meanio.modules = _modules;\n\n    //instance property\n    Meanio.prototype.modules = Meanio.modules;\n\n    Meanio.prototype.exportable_modules_list = [];\n\n    function onModuleAngularDependenciesRegistered(callback) {\n        Meanio.createModels();\n        callback();\n    }\n\n    function requireModel(path) {\n        var mdl = require(path);\n        if (mdl.register) {\n            Meanio.applyModels(mdl.register);\n        }\n    }\n\n    function Module(name) {\n        this.loadedmodule = Meanio.modules.moduleNamed(name);\n        if (!this.loadedmodule) {\n            Meanio.modules.dumpToConsole();\n            throw 'Module with name ' + name + ' is not loaded';\n        }\n        this.name = lowerCaseFirstLetter(this.loadedmodule.name);\n        this.menus = Meanio.Singleton.menus;\n        this.config = Meanio.Singleton.getConfig();\n        this.events = new Events(name);\n\n        // bootstrap models\n        util.walk(this.loadedmodule.path('server'), 'model', null, requireModel);\n    }\n\n    Module.prototype.render = function (view, options, callback) {\n        swig.renderFile(this.loadedmodule.path('server') + '/views/' + view + '.html', options, callback);\n    };\n\n    Module.prototype.setDefaultTemplate = function (template) {\n        Meanio.Singleton.template = template;\n    };\n\n    Module.prototype.routes = function () {\n        var args = Array.prototype.slice.call(arguments);\n        util.walk(this.loadedmodule.path('server'), 'route', 'middlewares', this.onRoute.bind(this, [this].concat(args)));\n    };\n\n    Module.prototype.onRoute = function (args, route) {\n        require(route).apply(this, args);\n    }\n\n    Module.prototype.register = function (callback) {\n        Meanio.Singleton.register(this.name, callback);\n    };\n\n    Module.prototype.angularDependencies = function (dependencies) {\n        this.angularDependencies = dependencies;\n        this.loadedmodule.angularDependencies = dependencies;\n    };\n    function updateSettings(Package, name, settings, callback) {\n        Package.findOneAndUpdate({\n            name: name\n        }, {\n            $set: {\n                settings: settings,\n                updated: new Date()\n            }\n        }, {\n            upsert: true,\n            multi: false\n        }, function (err, doc) {\n            if (err) {\n                console.log(err);\n                return callback(true, 'Failed to update settings');\n            }\n            return callback(null, doc);\n        });\n    }\n\n    function getSettings(Package, name, callback) {\n        Package.findOne({\n            name: name\n        }, function (err, doc) {\n            if (err) {\n                console.log(err);\n                return callback(true, 'Failed to retrieve settings');\n            }\n            return callback(null, doc);\n        });\n    }\n\n\n    Module.prototype.settings = function () {\n\n        if (!arguments.length) return;\n\n        var database = Meanio.Singleton.get('database');\n        if (!database || !database.connection) {\n            return {\n                err: true,\n                message: 'No database connection'\n            };\n        }\n\n        if (database.connection.modelNames().indexOf('Package') === -1) {\n            require('../config/package')(database);\n        }\n\n        var Package = database.connection.model('Package');\n        if (arguments.length === 2) return updateSettings(Package, this.name, arguments[0], arguments[1]);\n        if (arguments.length === 1 && typeof arguments[0] === 'object') return updateSettings(Package, this.name, arguments[0], function () {\n        });\n        if (arguments.length === 1 && typeof arguments[0] === 'function') return getSettings(Package, this.name, arguments[0]);\n\n    };\n    Module.bootstrapModules = function (callback) {\n        findModules(enableModules.bind(null, callback));\n    };\n\n    Meanio.prototype.Module = Module;\n\n}\n\nmodule.exports = supportModules;\n","/home/travis/build/npmtest/node-npmtest-meanio/node_modules/meanio/lib/core_modules/module/util.js":"'use strict';\n\nvar fs = require('fs'),\n  _ = require('lodash'),\n  glob = require('glob'),\n  path = require('path');\n\nvar baseRgx = /(.*).(js|coffee)$/;\n\n// recursively walk modules path and callback for each file\nfunction walk(wpath, type, excludeDir, callback) {\n  // regex - any chars, then dash type, 's' is optional, with .js or .coffee extension, case-insensitive\n  // e.g. articles-MODEL.js or mypackage-routes.coffee\n  var rgx = new RegExp('(.*)-' + type + '(s?).(js|coffee)$', 'i');\n  if (!fs.existsSync(wpath)) return;\n  fs.readdirSync(wpath).forEach(function(file) {\n    var newPath = path.join(wpath, file);\n    var stat = fs.statSync(newPath);\n    if (stat.isFile() && (rgx.test(file) || (baseRgx.test(file)) && ~newPath.indexOf(type))) {\n      // if (!rgx.test(file)) console.log('  Consider updating filename:', newPath);\n      callback(newPath);\n    } else if (stat.isDirectory() && file !== excludeDir && ~newPath.indexOf(type)) {\n      walk(newPath, type, excludeDir, callback);\n    }\n  });\n}\n\n// ability to preload requirements for tests\nfunction preload(gpath, type) {\n  glob.sync(gpath).forEach(function(file) {\n    walk(file, type, null, require);\n  });\n}\n\nexports.walk = walk;\nexports.preload = preload;\n","/home/travis/build/npmtest/node-npmtest-meanio/node_modules/meanio/lib/core_modules/module/dependablelist.js":"var DependableList = require('dependable-list'),\n    Dependable = DependableList.dependableConstructor(),\n    inherit = require('util').inherits,\n    path = require('path');\n\nfunction hasName(targetname, dep) {\n    return targetname === dep.name;\n}\n\nfunction depChecker(targetdep, depfromlist, depfromlistcontainer) {\n    targetdep.resolve(depfromlist.name);\n    if (targetdep.resolved()) {\n        return depfromlistcontainer;\n    }\n}\n\nfunction addToListOfUnresolved(lobj, unres) {\n    lobj.list.push(unres.name);\n}\n\nfunction ModuleList() {\n    DependableList.call(this);\n}\ninherit(ModuleList, DependableList);\nModuleList.prototype.dependableConstructor = function () {\n    return Module;\n};\nModuleList.prototype.createModule = function (name, version, source) {\n    return new Module(name, version, source);\n};\nModuleList.prototype.moduleNamed = function (name) {\n    return this.findOne(hasName.bind(null, name));\n};\n\nfunction Module(name, version, source) {\n    this.name = name;\n    this.version = version;\n    this.source = source;\n    Dependable.call(this);\n}\ninherit(Module, Dependable);\nModule.prototype.destroy = function () {\n    Dependable.prototype.destroy.call(this);\n    this.source = null;\n    this.version = null;\n    this.name = null;\n};\nModule.prototype.path = function (extra) {\n    return path.join(process.cwd(), this.source, extra);\n};\nModule.prototype.activate = function () {\n    var req = require(this.path('app.js'));\n    if (req && 'function' === req.init) {\n        req.init(this); //so that app.js of a package may export the init function to learn about its name, source, dependencies\n    }\n};\n\nmodule.exports = ModuleList;\n","/home/travis/build/npmtest/node-npmtest-meanio/node_modules/meanio/lib/core_modules/module/search.js":"var fs = require('fs'),\n    Q = require('q'),\n    path = require('path');\n\nfunction readModuleMeanJSONFileDone (_modules, fileDefer, file, source, fileErr, data){\n  if (data) {\n    try {\n      var json = JSON.parse(data.toString());\n      if (json.name && json.version) {\n        var dependable = _modules.createModule(json.name,json.version,path.join(source,file));\n      } else {\n        return fileDefer.resolve();\n      }\n      if (json.dependencies) {\n        dependable.cloneDependencies(json.dependencies);\n      }\n      _modules.add(dependable);\n    } catch (err) {\n      console.log(file,'mean json error',err);\n    }\n  }\n  fileDefer.resolve();\n}\n\nfunction readModulePackageJSONFileDone (_modules, fileDefer, file, source, fileErr, data) {\n  if (data) {\n    try {\n      var json = JSON.parse(data.toString());\n      if (json.mean) {\n        fs.readFile(path.join(process.cwd(), source, file, 'mean.json'), readModuleMeanJSONFileDone.bind(null, _modules, fileDefer, file, source));\n        return;\n      }\n    } catch (err) {\n      console.error(file, 'package.json error in readModulePackageJSONFileDone', err);\n      fileDefer.reject(err);\n      return;\n    }\n    fileDefer.resolve();\n  }else{\n    fileDefer.resolve();\n    //fileDefer.reject(fileErr);\n  }\n}\n\nfunction fileForEachProcess (_modules, source, promises, file) {\n  var fileDefer = Q.defer();\n  fs.readFile(path.join(process.cwd(), source, file, 'package.json'), readModulePackageJSONFileDone.bind(null, _modules, fileDefer, file, source));\n  promises.push(fileDefer.promise);\n}\n\nfunction processDirFilesFromSearchSource(_modules, disabled, source, deferred, err, files) {\n  if (err || !files || !files.length) {\n    if (err && err.code !== 'ENOENT') {\n      console.log(err);\n    } else {\n      return deferred.resolve();\n    }\n    return deferred.reject(err);\n  }\n\n  var promises = [];\n  for (var i in disabled) {\n    var index = files.indexOf(i);\n    if (index < 0) continue;\n    files.splice(index, 1);\n  }\n\n  files.forEach(fileForEachProcess.bind(null, _modules, source, promises));\n  return deferred.resolve(Q.all(promises));\n}\n\nfunction searchSourceForFindModules(_modules, disabled, source) {\n  var deferred = Q.defer();\n  fs.readdir(path.join(process.cwd(), source), processDirFilesFromSearchSource.bind (null, _modules, disabled, source, deferred));\n  return deferred.promise;\n}\n\nmodule.exports = searchSourceForFindModules;\n","/home/travis/build/npmtest/node-npmtest-meanio/node_modules/meanio/lib/core_modules/module/events.js":"'use strict';\n\n/**\n * Allows MeanIO to create a unique wrapper for a single EventEmitter per Module.\n * With this, we allows all Modules to use the same EventEmitter, but automatically\n *  namespace their events with the module name.\n */\n\nvar delimiter = '.';\nvar EventEmitter2 = require('eventemitter2').EventEmitter2;\nvar emitter = new EventEmitter2({\n  wildcard: true,\n  delimiter: delimiter,\n  // set this to `true` if you want to emit the newListener event. The default value is `true`\n  newListener: true,\n  // the maximum amount of listeners that can be assigned to an event, default 10.\n  maxListeners: 20\n});\n\n/**\n * @param {string} name - Name of the module, used to namespace events\n * @constructor\n */\nfunction Events(name) {\n  this.name = name;\n  this._default = {};\n}\n\n/**\n * Emits an event for the module\n * Automatically namespaced with the moduleName passed to the constructor\n * @deprecated Use emit with EventEmitter2 standard api\n * @param {*} opts - Any data to be passed with the event\n * @param {string} opts.action - Name of the event that happesn\n */\nEvents.prototype.publish = function (opts) {\n  console.error('publish() has been deprecated. Update to emit(event, data).');\n\n  if (!opts.action) {\n    console.error('Error: events require an \"action\" property');\n    return;\n  }\n  this.emit([this.name, opts.action], opts);\n};\n\n/**\n * Calls emit with the module name as the default root namespace\n * @see EventEmitter2.emit\n * @link https://github.com/asyncly/EventEmitter2\n * @param {array|string} event\n * @return {boolean}\n */\nEvents.prototype.emit = function (event) {\n  var args = prepArgs(arguments, this.name, event, this._default);\n  return emitter.emit.apply(emitter, args);\n};\n\n/**\n * Calls emitAsync with the module name as the default root namespace\n * @see EventEmitter2.emitAsync\n * @link https://github.com/asyncly/EventEmitter2\n * @param event\n * @returns {Promise}\n */\nEvents.prototype.emitAsync = function (event) {\n  var args = prepArgs(arguments, this.name, event, this._default);\n  return emitter.emitAsync.apply(emitter, args);\n};\n\n/**\n * @deprecated\n * @param {string|array} name - Event name\n * @param {function} cb\n */\nEvents.prototype.subscribe = function (name, cb) {\n  console.error('subscribe() has been deprecated. Update to on(event, listener)');\n  this.on(name, cb);\n};\n\n/**\n * Sets defaults that will be included with every event\n * Individual keys are overwritten if passed to emit()\n * @param data\n */\nEvents.prototype.setDefaults = function (data) {\n  for (var index in data) {\n    this._default[index] = data[index];\n  }\n};\n\n/**\n * @deprecated Use setDefaults\n * @param {*} data\n */\nEvents.prototype.defaultData = function (data) {\n  console.error('defaultData() has been deprecated. Update to setDefaults(data)');\n  this.setDefaults(data);\n};\n\n/**\n * Extending EventEmitter2 API\n */\nEvents.prototype.addListener = emitter.addListener.bind(emitter);\nEvents.prototype.on = emitter.on.bind(emitter);\nEvents.prototype.onAny = emitter.onAny.bind(emitter);\nEvents.prototype.offAny = emitter.offAny.bind(emitter);\nEvents.prototype.once = emitter.once.bind(emitter);\nEvents.prototype.many = emitter.many.bind(emitter);\nEvents.prototype.removeListener = emitter.removeListener.bind(emitter);\nEvents.prototype.off = emitter.off.bind(emitter);\nEvents.prototype.removeAllListeners = emitter.removeAllListeners.bind(emitter);\nEvents.prototype.setMaxListeners = emitter.setMaxListeners.bind(emitter);\nEvents.prototype.listeners = emitter.listeners.bind(emitter);\nEvents.prototype.listenersAny = emitter.listenersAny.bind(emitter);\n\nmodule.exports = Events;\n\n/**\n * Helps in preparing our arguments for passing to emit and emitAsync\n * @param args\n * @param name\n * @param defaults\n * @returns {*}\n */\nfunction prepArgs(args, name, event, defaults) {\n  args = Array.from(args);\n\n  var namespace = [name];\n  if (!Array.isArray(event)) {\n    event = event.split(delimiter);\n  }\n\n  namespace = namespace.concat(event);\n\n  args.shift();//remove the event\n\n  args.unshift(namespace);\n  if (defaults) {\n    args.push(defaults);\n  }\n  return args;\n}","/home/travis/build/npmtest/node-npmtest-meanio/node_modules/meanio/lib/core_modules/db/index.js":"'use strict';\n\nvar mongoose = require ('mongoose'),\n  Q = require('q'),\n  Schema = mongoose.Schema,\n  _ = require('lodash');\n\nmongoose.Promise = Q.Promise;\n\nfunction filterDBAliases (v) {\n  return mongoose.alias_MEANIODB_exists(v);\n}\n\nfunction applyModels (schema, model, collection, dbalias) {\n  mongoose.get_MEANIODB_connection(dbalias).model(model, schema, collection);\n  return mongoose.get_MEANIODB_connection(dbalias).model(model);\n}\n\nfunction connectDb (alias, path) {\n  var defer = Q.defer();\n  var connection = mongoose.createConnection (path);\n  connection.once ('connected', connectDbOk.bind(null, defer, {path:path, alias: alias, connection: connection}));\n  connection.once('error', connectDbFailed.bind(null, defer, {}));\n  return defer.promise;\n}\n\nfunction connectDbOk (defer, s) {\n  defer.resolve(s);\n}\n\nfunction connectDbFailed(defer, s) {\n  defer.reject(s);\n}\n\nfunction dataBasesReady (done, database, connection_pool) {\n  var alias_map = {};\n  for (var i in connection_pool) {\n    if (connection_pool[i].state !== 'fulfilled') continue;\n    alias_map[connection_pool[i].value.alias] = connection_pool[i].value.connection;\n  }\n  mongoose.get_MEANIODB_connection = function (alias) {\n    if ('default' === alias || !alias_map[alias]) {\n      return database;\n    }\n    return alias_map[alias];\n  };\n\n  mongoose.alias_MEANIODB_exists = function (alias) {\n    return (alias === 'default') || !alias || alias in alias_map;\n  };\n\n  done.resolve();\n}\n\nvar lazyModelsMap = {};\n\nfunction createModelStructure (schema, model, collection, db) {\n  db = db || 'default';\n  if (!lazyModelsMap[db]) lazyModelsMap[db] = {};\n  if (!lazyModelsMap[db][model]) lazyModelsMap[db][model] = {pre:[], post:[], virtual: [], indices: []};\n\n  var mc = lazyModelsMap[db][model];\n  mc.collection = collection;\n  mc.fields = _.merge (mc.fields || {}, schema.fields);\n  mc.methods = _.assign (mc.methods || {}, schema.methods);\n  mc.statics = _.assign (mc.statics || {}, schema.statics);\n\n  if (schema.options) mc.options = _.assign (mc.options || {}, schema.options);\n  if (schema.indices) Array.prototype.push (mc.indices, schema.indices);\n  if (schema.pre) mc.pre.push (schema.pre);\n  if (schema.virtual) mc.virtual.push (schema.virtual);\n}\n\nfunction bindIndices (s, i) {\n  s.index(i);\n}\nfunction bindVirtuals (s, vr) {\n  for (var name in vr) {\n    var v = s.virtual(name);\n    console.log('create virtual ', name);\n    if (vr[name].get) v.get(vr[name].get);\n    if (vr[name].set) v.set(vr[name].set);\n  }\n}\n\nfunction bindHook (s, type, rec) {\n  for (var name in rec) {\n    console.log('create hook', name);\n    s[type](name, rec[name]);\n  }\n}\n\nfunction onInstance(meanioinstance, defer) {\n  var config = meanioinstance.getConfig();\n  mongoose.set('debug', config.mongoose && config.mongoose.debug);\n  var database = mongoose.connect(config.db || '', config.dbOptions || {}, function(err) {\n    if (err) {\n      console.error('Error:', err.message);\n      return console.error('**Could not connect to MongoDB. Please ensure mongod is running and restart MEAN app.**');\n    }\n\n    // Register database dependency\n    meanioinstance.register('database', {\n      connection: database\n    });\n\n    var db_promises = [];\n    for (var i in config.dbs) {\n      db_promises.push(connectDb(i, config.dbs[i]));\n    }\n    Q.allSettled(db_promises).then(dataBasesReady.bind(null, defer, database));\n  });\n}\n\nfunction supportDB(Meanio) {\n  Meanio.onInstance(onInstance);\n\n  Meanio.createModels = function () {\n    for (var db in lazyModelsMap) {\n      for (var model in lazyModelsMap[db]) {\n        var rec = lazyModelsMap[db][model];\n        //console.log('for db', db,' model ',model, 'is about to be created:',rec);\n        var s = new Schema(rec.fields, rec.options);\n        s.methods = rec.methods;\n        s.statics = rec.statics;\n        rec.virtual.forEach(bindVirtuals.bind(null, s));\n        rec.pre.forEach(bindHook.bind(null, s, 'pre'));\n        rec.post.forEach(bindHook.bind(null, s, 'post'));\n        rec.indices.forEach(bindIndices.bind(null, s));\n        var m = applyModels(s, model, rec.collection, db);\n        Meanio.Singleton.events.emit ('lazy_model_ready', {model: m, db: db});\n      }\n    }\n    Meanio.Singleton.events.emit('lazy_models_ready');\n  };\n\n  Meanio.applyModels = function (model_register) {\n    for (var i in model_register) {\n      var itm = model_register[i];\n      if (!itm.schema) {\n        throw 'No schema in reqister model request, can not move on ...';\n      }\n      if (!itm.model) {\n        throw 'No model in register model request, can not move on ...';\n      }\n      if (!itm.dbs || itm.dbs.length === 0) {\n        itm.dbs = ['default'];\n      }\n      if (itm.schema instanceof mongoose.Schema) {\n        ///filter out eventual duplicates in dbs array and nonexisting aliases as well\n        _.uniq(itm.dbs.filter(filterDBAliases)).forEach(applyModels.bind(null, itm.schema, itm.model, itm.collection));\n        continue;\n      }\n\n      //ok, now form structures for lazy model creation\n      itm.dbs.forEach( createModelStructure.bind(null, itm.schema, itm.model, itm.collection) );\n    }\n  };\n}\nmodule.exports = supportDB;\n","/home/travis/build/npmtest/node-npmtest-meanio/node_modules/meanio/lib/core_modules/server/index.js":"'use strict';\n\nvar   Q = require('q'),\n  path = require('path'),\n  ServerEngine = require('./engine');\n\n/* 'hidden methods' of Meanio.prototype */\nfunction serveReady(engine,callback){\n  engine.endBootstrap(callback.bind(null,this));\n}\n\nfunction serveWithDb(Meanio,callback,database){\n  var engine = ServerEngine.produceEngine(this.options.serverengine||this.getConfig().serverengine);\n  engine.beginBootstrap(this, database);\n  Q.all(this.instanceWaitersQ).done(serveReady.bind(this,engine,callback));\n}\n\nfunction genericServe(Meanio, options, callback) {\n  if (this.active){\n    callback(this);\n    return;\n  }\n  Meanio.prototype.options = options;\n  Meanio.prototype.active = true;\n  this.resolve('database',serveWithDb.bind(this,Meanio,callback));\n}\n/* end of 'hidden methods' of Meanio.prototype */\n\nfunction onInstance(Meanio,meanioinstance,defer){\n  Meanio.prototype.serve = genericServe.bind(meanioinstance,Meanio);\n  var middleware = {\n    before: [],\n    after: []\n  };\n  //so tangled up, much spaghetti...\n  Meanio.prototype.chainware = {\n\n    add: function(event, weight, func) {\n      middleware[event].splice(weight, 0, {\n        weight: weight,\n        func: func\n      });\n      middleware[event].join();\n      middleware[event].sort(function(a, b) {\n        if (a.weight < b.weight) {\n          a.next = b.func;\n        } else {\n          b.next = a.func;\n        }\n        return (a.weight - b.weight);\n      });\n    },\n\n    before: function(req, res, next) {\n      if (!middleware.before.length) return next();\n      this.chain('before', 0, req, res, next);\n    },\n\n    after: function(req, res, next) {\n      if (!middleware.after.length) return next();\n      this.chain('after', 0, req, res, next);\n    },\n\n    chain: function(operator, index, req, res, next) {\n      var args = [req, res,\n        function() {\n          if (middleware[operator][index + 1]) {\n            this.chain('before', index + 1, req, res, next);\n          } else {\n            next();\n          }\n        }\n      ];\n\n      middleware[operator][index].func.apply(this, args);\n    }\n  };\n\n  defer.resolve();\n}\n\nfunction supportServer(Meanio){\n  Meanio.onInstance(onInstance.bind(null,Meanio));\n}\n\nmodule.exports = supportServer;\n","/home/travis/build/npmtest/node-npmtest-meanio/node_modules/meanio/lib/core_modules/server/engine.js":"function ServerEngine(){\n}\nServerEngine.prototype.name = function(){\n  return 'null server engine';\n};\nServerEngine.prototype.destroy = function(){\n};\nServerEngine.prototype.beginBootstrap = function(meanioinstance, database){\n};\nServerEngine.prototype.endBootstrap = function(callback){\n};\nServerEngine.produceEngine = function(enginename){\n  var engine;\n  switch(enginename || 'express'){\n    case 'express':\n      engine = new (require('./ExpressEngine'))();\n      break;\n    default:\n      throw 'Server Engine '+enginename+' not supported';\n  }\n  return engine;\n};\n\nmodule.exports = ServerEngine;\n","/home/travis/build/npmtest/node-npmtest-meanio/node_modules/meanio/gulpfile.js":"var gulp = require('gulp'),\n  mocha = require('gulp-mocha');\n\ngulp.task('test', function(){\n  process.env.NODE_ENV = \"test\";\n  process.env.NODE_CONFIG_DIR = './test/config';\n\n  return gulp.src('./test/**/*.spec.js', {read: false})\n    .pipe(mocha());\n});","/home/travis/build/npmtest/node-npmtest-meanio/node_modules/meanio/lib/platform.js":"'use strict';\n\nvar Platform = function() {\n};\n\nPlatform.isWin = function() {\n  //its always win32 even if its a x64 system\n  return process.platform === 'win32';\n};\n\nPlatform.isMac = function() {\n  return process.platform === 'darwin';\n};\n\nPlatform.isLinux = function() {\n  return process.platform === 'linux';\n};\n\nmodule.exports = function(Meanio) {\n  Meanio.prototype.platform = Platform;\n};\n","/home/travis/build/npmtest/node-npmtest-meanio/node_modules/meanio/resources/web-bootstrap.js":"'use strict';\n/* global jQuery:true */\n\nangular.element(document).ready(function() {\n  //Fixing facebook bug with redirect\n  if (window.location.hash === '#_=_') window.location.hash = '#!';\n\n  //Then init the app\n  angular.bootstrap(document, ['mean']);\n\n});\n\nfunction processModules(modules) {\n  var packageModules = ['ngCookies', 'ngResource', 'ui.bootstrap', 'ui.router', 'ui.select', 'ngSanitize'],m,mn;\n  for (var index in modules) {\n    m = modules[index];\n    mn = 'mean.'+m.name;\n    angular.module(mn, m.angularDependencies || []);\n    packageModules.push(mn);\n  }\n\n  angular.module('mean', packageModules);\n}\n\njQuery.ajax('/_getModules', {\n  dataType: 'json',\n  async:false,\n  success: processModules\n});\n\n"}